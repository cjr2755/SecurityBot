import sys
import yaml

from discord.ext import commands
from discord_slash import SlashCommand
from discord import Embed, Game, Status

from bot_class import Bot 
from permissions import create_permission_list
from web_scraper import search_websites

# Initialize variables
bot = commands.Bot(command_prefix = '>')
slash = SlashCommand(bot, sync_commands=True)

# Read in config file
with open('bot_config.yml') as f:
    try:
        data = yaml.safe_load(f) 
    except Exception as e:
        print(e)
        sys.exit(1)

@bot.event
async def on_ready(): 
    await bot.change_presence(activity=Game(name="Scanning the internet for bad Discord Bots!"))  
    print('Bot Is Ready')  

    
@slash.slash(name = 'Ping', description='Sends Pong')
async def ping(ctx):
    await ctx.send(content=f"Pong! Lag is ({round(bot.latency*1000)}ms)")


@slash.slash(name='Permcheck', description='Check the permission number')
async def permcheck(ctx, perm_num):
    await ctx.defer()
    if perm_num is None:
        perm_num = 537159744

    # Create a bot instance and calculate the permission values of the bot. 
    bot = Bot()
    bot.load_permissions(int(perm_num), bot.get_permission_dict())

    # Create a discord embed message (for nice looking output)
    embedVar = Embed(title="Permission List:",
                            description=f"All permissions in for number {perm_num}\n",
                            color=0xFF4500)

    # Add all permissions within the bot to display.
    for permission in bot.get_permission_list():
        embedVar.add_field(name=f"**{permission.get_perm_name()}**", value=f"{permission.get_perm_num()}\
                            {permission.get_perm_desc()} {permission.get_perm_weight()}\n", inline=False)

    await ctx.send(embed=embedVar)


@slash.slash(name='Check', description='Check the bots security',)
async def check(ctx, bot_name):
    
    # Create bot instance
    bot = Bot()

    # Wait for the program to finish
    # Displays "<Bot Name> is thinking..."
    await ctx.defer()
    
    # Search the websites for bot data
    search_websites(bot_name, bot)
    
    # If there is an error, display message and exit.
    if bot.error != "":
        errorMsg = Embed(title=f"Analysis of '{bot_name}'",
                            description="**Error**\n",
                            color=0xff1a00)
        errorMsg.add_field(name="This analysis could not be completed because of an error",
                            value=f"*Reason:* **{bot.error}**")
        await ctx.send(embed=errorMsg)
        return


    # Calculate the aggregated score
    bot.calculate_score()


    # Change the color of the message based on score
    display_color = 0
    score_text = "If you see this, something has gone impossibly wrong"
    if bot.final_score < 30 :
        display_color = 0x5ce3cc
        score_text = f"{chr(9989)} This bot seems safe to use, but always do your own analysis"
    elif 30 < bot.final_score < 50:
        display_color = 0x3ce61a 
        score_text = f"{chr(9888)} This bot appears unsafe! {chr(9888)} Conduct additional analysis " \
            " before adding this to your server"
    elif 50 <= bot.final_score < 75:
        display_color = 0xffe607
        score_text = f"{chr(10060)} Warning! {chr(10060)} Unless you know what you are doing, do not add this bot" \
            " to your server, it poses significant potential security risks"
    elif 75 <= bot.final_score <= 100:
        display_color = 0xff1a00
        score_text = f"{chr(128721)} DANGER! {chr(128721)} This bot might put your entire server at risk!" \
            " Do not add unless you are certain about what you are doing!"
   

    # Create embed Message
    embedVar = Embed(title=f"Analysis of '{bot_name}'",
                            description="",
                            color=display_color)
    embedVar.add_field(name="**Overall Score:**",value=f"**{bot.final_score}/100**\n*{score_text}*", inline="False")


    # Display the website it exists.
    if bot.website != "":
        embedVar.add_field(name="Bot Website:", value=f"{bot.website}\nPlease check this for private policy and/or source code.", inline=False)


    # Display warnings if configured to do so
    if "show_warnings" in data and data['show_warnings'] == "true":
        warnings_text = ""
        
        for warning in bot.warnings:
            warnings_text += warning+"\n"
        embedVar.add_field(name="Warnings generated by this analysis",value=warnings_text)


    # Only display the worst permissions of the bot score is bad.
    if bot.final_score >= 50:
        # This lambda converts the PermissionList into a regular Python list.
        bad_permissions = list(sorted(bot.permissions, key=lambda x: x.perm_weight))

        embedVar.add_field(name=f"Here are the worst permissions of this bot!:", value="** **", inline=False)

        # Loop through the reversed list to print the most worst permissions. 
        for count, permission in enumerate(reversed(bad_permissions)):
            if count > 2:
                break 
            # The value is set this way in order to allow for empty values
            embedVar.add_field(name=f"""{count+1}.) **{permission.perm_name}** 
            - ***{permission.perm_desc}***""",value="** ** ", inline=False)
        
    # Create a customized embed message
    embedVar.set_thumbnail(url=bot.image)
    embedVar.set_footer(text="Created by cjr2755 for CSEC-380")

    # Send this embed message
    await ctx.send(embed=embedVar)
    

@slash.slash(name='print_test', description='sample printing',guild_ids=[588480954935410698])
async def print_test(ctx):
    # test_string = f"{chr(128721)} STOP {chr(128721)}\n {chr(9989)} YES {chr(9989)}\n {chr(9888)} WARNING {chr(9888)}"
    #     test_string = f"{chr(9989)}This bot seems safe to use{chr(9989)}, but always do your own analysis"
    ts = f"""{chr(48+1)}{chr(65039)}{chr(8419)}
    Test"""
    errorMsg = Embed(title=f"Analysis of ",
                            description="**Error**\n",
                            color=0xff1a00)
    errorMsg.add_field(name="test",value=ts)
    await ctx.send(embed=errorMsg)
    
    # await ctx.send(ts)    


@slash.slash(name = 'Shutdown', description='Shuts down the Bot',guild_ids=[588480954935410698])
async def shutdown(ctx):
    sender = ctx.message.author
    result = await bot.is_owner(sender)  # Makes sure only the bot owner can shut the bot down
    if result:
        await ctx.send("Shutting down!")
        await bot.change_presence(status=Status.offline)
        await bot.close()
    else:
        await ctx.send("You are not my boss, you cannot tell me what to do!")

bot.run(data["token"])